// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct NftEscrowContractProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for NftEscrowContractProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = NftEscrowContractProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        NftEscrowContractProxyMethods { wrapped_tx: tx }
    }
}

pub struct NftEscrowContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> NftEscrowContractProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> NftEscrowContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn escrow<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        wanted_nft: Arg0,
        wanted_nonce: Arg1,
        wanted_address: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, u32> {
        self.wrapped_tx
            .raw_call("escrow")
            .argument(&wanted_nft)
            .argument(&wanted_nonce)
            .argument(&wanted_address)
            .original_result()
    }

    pub fn cancel<
        Arg0: ProxyArg<u32>,
    >(
        self,
        offer_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("cancel")
            .argument(&offer_id)
            .original_result()
    }

    pub fn accept<
        Arg0: ProxyArg<u32>,
    >(
        self,
        offer_id: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("accept")
            .argument(&offer_id)
            .original_result()
    }

    pub fn get_created_offers<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, MultiValue2<u32, Offer<Env::Api>>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCreatedOffers")
            .argument(&address)
            .original_result()
    }

    pub fn get_wanted_offers<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, MultiValue2<u32, Offer<Env::Api>>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getWantedOffers")
            .argument(&address)
            .original_result()
    }

    pub fn created_offers<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, u32>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("created_offers")
            .argument(&address)
            .original_result()
    }

    pub fn wanted_offers<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, u32>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("wanted_offers")
            .argument(&address)
            .original_result()
    }

    pub fn offers<
        Arg0: ProxyArg<u32>,
    >(
        self,
        id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Offer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("offers")
            .argument(&id)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, Debug)]
pub struct Offer<Api>
where
    Api: ManagedTypeApi,
{
    pub creator: ManagedAddress<Api>,
    pub nft: TokenIdentifier<Api>,
    pub nonce: u64,
    pub wanted_nft: TokenIdentifier<Api>,
    pub wanted_nonce: u64,
    pub wanted_address: ManagedAddress<Api>,
}
